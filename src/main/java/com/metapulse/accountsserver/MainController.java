package com.metapulse.accountsserver;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private ItemService itemService;
    @Autowired
    private ItemRepository itemRepository;
    @Autowired
    private ItemForSaleRepository itemForSaleRepository;
    @Autowired
    private TradeRepository tradeRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setPassword(password);
        userRepository.save(n);
        return "Saved the user! <3";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    /*Sets the money of all users to 1500, only used for testing*/
    @PutMapping("/setMoney")
    public @ResponseBody String updateAllUsersMoney() {
        Iterable<User> users = userRepository.findAll();
        for (User user : users) {
            user.setMoney(1500.0);
            userRepository.save(user);
        }
        return "All users have been updated with money 500";
    }
    /*Allows you to generate a new item and to generate a relation with the owner*/
    @PostMapping(path = "/addItem")
    public ResponseEntity<?> addNewItem(@RequestParam String name, @RequestParam String description
            , @RequestParam String code, @RequestParam String ip, @RequestParam String username, @RequestParam String imagePath) {

        User user = userRepository.findByName(username);

        if (user != null) {
            try {
                itemService.createItem(name,description,code,ip, username, imagePath);
                return ResponseEntity.ok("Saved the item!");
            } catch (Exception e) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Unable to add the item");
            }
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("The user owner of the item doesnt exist");
        }
    }
    /*Fetches all the items in the database*/
    @GetMapping(path="/allItems")
    public @ResponseBody Iterable<Item> getAllItems() {
        return itemRepository.findAll();
    }
    /*Fetches all the current trade instances in the database*/
    @GetMapping(path="/allTrades")
    public @ResponseBody Iterable<Trade> getAllTrades() {
        return tradeRepository.findAll();
    }
    /*Deletes all the users in the database, used for testing*/
    @DeleteMapping(path="/deleteAllUsers")
    public @ResponseBody String deleteAllUsers() {
        try {
            userRepository.deleteAll();

            return "All users deleted successfully!";
        } catch (Exception e) {
            return "An error occurred while deleting data: " + e.getMessage();
        }
    }
    /*Deletes all the items in the database, used for testing*/
    @DeleteMapping(path="/deleteAllItems")
    public @ResponseBody String deleteAllItems() {
        try {
            itemRepository.deleteAll();

            return "All items deleted successfully!";
        } catch (Exception e) {
            return "An error occurred while deleting data: " + e.getMessage();
        }
    }

    /*Deletes all the instances of items for sale from the database*/
    @DeleteMapping(path="/deleteAllItemsForSale")
    public @ResponseBody String deleteAllItemsForSale() {
        try {
            itemForSaleRepository.deleteAll();

            return "All items for sale deleted successfully!";
        } catch (Exception e) {
            return "An error occurred while deleting data: " + e.getMessage();
        }
    }
    /*Deletes all the trades that exists in the database*/
    @DeleteMapping(path="/deleteAllTrades")
    public @ResponseBody String deleteAllTrades() {
        try {
            tradeRepository.deleteAll();

            return "All trades deleted successfully!";
        } catch (Exception e) {
            return "An error occurred while deleting data: " + e.getMessage();
        }
    }

    /*Deletes almost all the data in the database, OUTDATED*/
    @DeleteMapping(path="/deleteAllData")
    public @ResponseBody String deleteAllData() {
        try {
            userRepository.deleteAll();
            itemRepository.deleteAll();
            itemForSaleRepository.deleteAll();

            return "All data deleted successfully!";
        } catch (Exception e) {
            return "An error occurred while deleting data: " + e.getMessage();
        }
    }
}
